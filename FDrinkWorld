import sqlite3
from tkinter import *
from tkinter import ttk
from tkinter import messagebox

# Koneksi ke SQLite
conn = sqlite3.connect("products.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    category TEXT NOT NULL,
    price REAL NOT NULL
)
""")
conn.commit()

# Fungsi untuk mengatur CRUD
def add_product():
    name = name_entry.get()
    category = category_combobox.get()
    price = price_entry.get()

    if not name or not category or not price:
        messagebox.showwarning("Warning", "All fields are required!")
        return

    cursor.execute("INSERT INTO products (name, category, price) VALUES (?, ?, ?)", (name, category, float(price)))
    conn.commit()
    reset_form()
    refresh_table()
    messagebox.showinfo("Success", "Product added successfully!")

def update_product():
    selected = tree.focus()
    if not selected:
        messagebox.showwarning("Warning", "Select a product to update!")
        return

    name = name_entry.get()
    category = category_combobox.get()
    price = price_entry.get()

    if not name or not category or not price:
        messagebox.showwarning("Warning", "All fields are required!")
        return

    product_id = tree.item(selected, 'values')[0]
    cursor.execute("UPDATE products SET name=?, category=?, price=? WHERE id=?", (name, category, float(price), product_id))
    conn.commit()
    reset_form()
    refresh_table()
    messagebox.showinfo("Success", "Product updated successfully!")

def delete_product():
    selected = tree.focus()
    if not selected:
        messagebox.showwarning("Warning", "Select a product to delete!")
        return

    product_id = tree.item(selected, 'values')[0]
    cursor.execute("DELETE FROM products WHERE id=?", (product_id,))
    conn.commit()
    refresh_table()
    messagebox.showinfo("Success", "Product deleted successfully!")

def search_product():
    search_term = search_entry.get()
    for row in tree.get_children():
        tree.delete(row)

    cursor.execute("SELECT * FROM products WHERE name LIKE ?", ('%' + search_term + '%',))
    for row in cursor.fetchall():
        tree.insert("", END, values=row)

def reset_form():
    name_entry.delete(0, END)
    category_combobox.set("")
    price_entry.delete(0, END)
    search_entry.delete(0, END)

def refresh_table():
    for row in tree.get_children():
        tree.delete(row)

    cursor.execute("SELECT * FROM products")
    for row in cursor.fetchall():
        tree.insert("", END, values=row)
    calculate_total_price()

def calculate_total_price():
    total_price = 0
    product_count = {"sweet": 0, "savory": 0, "drinks": 0}  # Kategori produk dan jumlahnya

    cursor.execute("SELECT category, price FROM products")
    for row in cursor.fetchall():
        category = row[0]
        price = row[1]
        total_price += price
        product_count[category] += 1

    total_price_label.config(text=f"Total Price: Rp {total_price:,.0f}")
    category_label.config(text=f"Sweet: {product_count['sweet']} | Savory: {product_count['savory']} | Drinks: {product_count['drinks']}")

# GUI menggunakan Tkinter
root = Tk()
root.title("FDrinkWorld")
root.geometry("800x600")
root.configure(bg="#87CEEB")  # Warna biru laut

# Frame utama untuk menyusun elemen ke tengah
main_frame = Frame(root, bg="#87CEEB")
main_frame.pack(expand=True)

# Title label
title_label = Label(main_frame, text="FDrinkWorld", bg="#87CEEB", font=("Arial", 24, "bold"))
title_label.grid(row=0, column=0, columnspan=3, pady=20)

# Form input
Label(main_frame, text="Name", bg="#87CEEB", font=("Arial", 12)).grid(row=1, column=0, padx=10, pady=5, sticky=W)
name_entry = Entry(main_frame, width=30)
name_entry.grid(row=1, column=1, padx=10, pady=5)

Label(main_frame, text="Category", bg="#87CEEB", font=("Arial", 12)).grid(row=2, column=0, padx=10, pady=5, sticky=W)
category_combobox = ttk.Combobox(main_frame, values=["sweet", "savory", "drinks"], width=27, state="readonly")
category_combobox.grid(row=2, column=1, padx=10, pady=5)

Label(main_frame, text="Price", bg="#87CEEB", font=("Arial", 12)).grid(row=3, column=0, padx=10, pady=5, sticky=W)
price_entry = Entry(main_frame, width=30)
price_entry.grid(row=3, column=1, padx=10, pady=5)

Label(main_frame, text="Search", bg="#87CEEB", font=("Arial", 12)).grid(row=4, column=0, padx=10, pady=5, sticky=W)
search_entry = Entry(main_frame, width=30)
search_entry.grid(row=4, column=1, padx=10, pady=5)
Button(main_frame, text="Search", command=search_product).grid(row=4, column=2, padx=10, pady=5)

# Buttons
Button(main_frame, text="Add", command=add_product, width=10).grid(row=5, column=0, padx=10, pady=10)
Button(main_frame, text="Update", command=update_product, width=10).grid(row=5, column=1, padx=10, pady=10)

# Table untuk menampilkan data
columns = ("ID", "Name", "Category", "Price")
tree = ttk.Treeview(main_frame, columns=columns, show="headings")
tree.heading("ID", text="ID")
tree.heading("Name", text="Name")
tree.heading("Category", text="Category")
tree.heading("Price", text="Price")
tree.grid(row=6, column=0, columnspan=3, padx=10, pady=10)

# Total Price Label
total_price_label = Label(main_frame, text="Total Price: Rp 0", bg="#87CEEB", font=("Arial", 12))
total_price_label.grid(row=7, column=0, columnspan=3, pady=10)

# Category and Product Count Label
category_label = Label(main_frame, text="Sweet: 0 | Savory: 0 | Drinks: 0", bg="#87CEEB", font=("Arial", 12))
category_label.grid(row=8, column=0, columnspan=3, pady=10)

# Delete Button
Button(main_frame, text="Delete", command=delete_product, width=10).grid(row=9, column=1, padx=10, pady=10)

# Refresh Button
Button(main_frame, text="Refresh", command=refresh_table, width=10).grid(row=9, column=0, padx=10, pady=10)

# Load data awal
refresh_table()

root.mainloop()